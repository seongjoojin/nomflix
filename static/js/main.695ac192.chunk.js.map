{"version":3,"sources":["assets/noPosterSmall.png","components/GlobalStyles.tsx","api.ts","components/Loading.tsx","components/Section.tsx","components/Poster.tsx","routes/Home.tsx","routes/TV.tsx","routes/Search.tsx","components/MovieDetailData.tsx","components/TVDetailData.tsx","components/NoResult.tsx","routes/Detail.tsx","components/Header.tsx","components/Router.tsx","components/App.tsx","index.tsx"],"names":["module","exports","globalStyles","createGlobalStyle","reset","API","Axios","create","baseURL","params","api_key","process","language","moviesAPI","get","id","append_to_response","term","query","encodeURIComponent","tvAPI","Container","styled","div","Loading","role","aria-label","Title","span","Grid","Section","title","children","Image","props","bgURL","Rating","ImageContainer","Year","Poster","imageURL","rating","year","isMovie","to","require","length","substring","Home","useState","loading","setLoading","error","setError","result","setResult","useEffect","a","nowPlaying","data","results","upcoming","popular","fetchData","useFetch","map","movie","key","poster_path","vote_average","release_date","TV","topRated","airingToday","show","original_name","first_air_date","Form","form","Input","input","Search","defaultValue","value","setValue","onChange","event","currentTarget","useInput","termValue","setTermValue","setResults","movieResults","tvResults","onSubmit","preventDefault","placeholder","MovieDetailData","content","tab","initialTab","currentIndex","changeIetm","useTabs","Data","href","imdb_id","ItemContainer","Item","Divider","runtime","genres","genre","index","name","Overview","overview","TabHeader","section","TabHeaderItem","onClick","active","TabContent","TabContentItem","videos","filter","item","site","videoResult","TabContentText","production_companies","TabContentTitle","company","origin_country","production_countries","country","TVDetailData","external_ids","target","episode_run_time","seasons","TVSeasonContainer","season","TVSeasonContent","TVSeasonPoster","img_url","TVSeasonText","NoResult","Backdrop","Content","Cover","h3","p","button","h6","ul","li","Detail","match","useRouteMatch","pathname","useLocation","movieId","parseInt","includes","Error","backdrop_path","renderData","Navigation","header","List","ListItem","current","StyledLink","Link","Header","Router","exact","path","component","from","App","GlobalStyles","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.695ac192.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/noPosterSmall.87a0eb6a.png\";","import { createGlobalStyle, GlobalStyleComponent, DefaultTheme } from 'styled-components';\nimport reset from 'styled-reset';\n\nconst globalStyles: GlobalStyleComponent<{}, DefaultTheme> = createGlobalStyle`\n    ${reset};\n    a {\n        text-decoration:none;\n        color: inherit;\n    }\n    * {\n        box-sizing: border-box;\n    }\n    html {\n        font-size: 10px;\n    }\n    body {\n        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\n        font-size: 1.2rem;\n        background-color: rgba(20, 20, 20, 1);\n        color: white;\n        padding-top: 5rem;\n    }\n`;\n\nexport default globalStyles;","import Axios, { AxiosInstance, AxiosPromise } from 'axios';\n\nconst API: AxiosInstance = Axios.create({\n\tbaseURL: 'https://api.themoviedb.org/3/',\n\tparams: {\n\t\tapi_key: process.env.REACT_APP_TMDB_KEY,\n\t\tlanguage: 'ko-KR'\n\t}\n});\n\nexport interface MovieItem {\n\tvote_count: number;\n\tid: number;\n\tvideo: boolean;\n\tvote_average: number;\n\ttitle: string;\n\tpopularity: number;\n\tposter_path: string;\n\toriginal_language: string;\n\toriginal_title: string;\n\tgenre_ids: Array<number>;\n\tbackdrop_path: string;\n\tadult: boolean;\n\toverview: string;\n\trelease_date: string;\n}\n\ninterface MovieListData {\n\tpage: number;\n\ttotal_results: number;\n\ttotal_pages: number;\n\tresults: MovieItem[];\n}\n\ninterface Genre {\n\tid: number;\n\tname: string;\n}\n\ninterface Company {\n\tid: number;\n\tlogo_path: string | null;\n\tname: string;\n\torigin_country: string;\n}\n\ninterface Country {\n\tiso_3166_1: string;\n\tname: string;\n}\n\ninterface Language {\n\tiso_639_1: string;\n\tname: string;\n}\n\nexport interface VideosResult {\n\tid: string;\n\tiso_639_1: string;\n\tiso_3166_1: string;\n\tkey: string;\n\tname: string;\n\tsite: string;\n\tsize: number;\n\ttype: string;\n}\n\ninterface Videos {\n\tresults: VideosResult[];\n}\n\nexport interface MovieDetail {\n\tadult: boolean;\n\tbackdrop_path: string;\n\tbudget: number;\n\tgenres: Genre[];\n\thomepage: string;\n\tid: number;\n\timdb_id: string;\n\toriginal_language: string;\n\toriginal_title: string;\n\toverview: string;\n\tpopularity: number;\n\tposter_path: string;\n\tproduction_companies: Company[];\n\tproduction_countries: Country[];\n\trelease_date: string;\n\trevenue: number;\n\truntime: number;\n\tspoken_languages: Language[];\n\tstatus: string;\n\ttagline: string;\n\ttitle: string;\n\tvideo: boolean;\n\tvote_average: number;\n\tvote_count: number;\n\tvideos: Videos;\n}\n\ninterface IMoviesAPI {\n\tnowPlaying: () => AxiosPromise<MovieListData>;\n\tupcoming: () => AxiosPromise<MovieListData>;\n\tpopular: () => AxiosPromise<MovieListData>;\n\tmovieDetail: (id: number) => AxiosPromise<MovieDetail>;\n\tsearch: (term: string) => AxiosPromise<MovieListData>;\n}\n\nexport const moviesAPI: IMoviesAPI = {\n\tnowPlaying: () => API.get('movie/now_playing'),\n\tupcoming: () => API.get('movie/upcoming'),\n\tpopular: () => API.get('movie/popular'),\n\tmovieDetail: (id: number) =>\n\t\tAPI.get(`movie/${id}`, {\n\t\t\tparams: {\n\t\t\t\tappend_to_response: 'videos'\n\t\t\t}\n\t\t}),\n\tsearch: (term: string) =>\n\t\tAPI.get('search/movie', {\n\t\t\tparams: {\n\t\t\t\tquery: encodeURIComponent(term)\n\t\t\t}\n\t\t})\n};\n\nexport interface TvItem {\n\toriginal_name: string;\n\tgenre_ids: Array<number>;\n\tname: string;\n\tpopularity: number;\n\torigin_country: Array<string>;\n\tvote_count: number;\n\tfirst_air_date: string;\n\tbackdrop_path: string;\n\toriginal_language: string;\n\tid: number;\n\tvote_average: number;\n\toverview: string;\n\tposter_path: string;\n}\n\ninterface TvListData {\n\tpage: number;\n\ttotal_results: number;\n\ttotal_pages: number;\n\tresults: TvItem[];\n}\n\ninterface TvProducer {\n\tid: number;\n\tcredit_id: string;\n\tname: string;\n\tgender: number;\n\tprofile_path: string | null;\n}\n\ninterface LastEpisode {\n\tair_date: string;\n\tepisode_number: number;\n\tid: number;\n\tname: string;\n\toverview: string;\n\tproduction_code: number | null;\n\tseason_number: number;\n\tshow_id: number;\n\tstill_path: string;\n\tvote_average: number;\n\tvote_count: number;\n}\n\ninterface Network {\n\tname: string;\n\tid: number;\n\tlogo_path: string;\n\torigin_country: string;\n}\n\ninterface TvCompany {\n\tid: number;\n\tlogo_path: string;\n\tname: string;\n\torigin_country: string;\n}\n\ninterface Season {\n\tair_date: string;\n\tepisode_count: number;\n\tid: number;\n\tname: string;\n\toverview: string;\n\tposter_path: string | null;\n\tseason_number: number;\n}\n\ninterface ExternalIds {\n\timdb_id: string | null;\n\tfreebase_mid: string | null;\n\tfreebase_id: string | null;\n\ttvdb_id: number | null;\n\ttvrage_id: number | null;\n\tfacebook_id: string | null;\n\tinstagram_id: string | null;\n\ttwitter_id: string | null;\n}\n\nexport interface TvDetail {\n\tbackdrop_path: string;\n\tcreated_by: TvProducer[];\n\tepisode_run_time: Array<number>;\n\tfirst_air_date: string;\n\tgenres: Genre[];\n\thomepage: string;\n\tid: number;\n\tin_production: boolean;\n\tlanguages: Array<string>;\n\tlast_air_date: string;\n\tlast_episode_to_air: LastEpisode;\n\tname: string;\n\tnext_episode_to_air: null;\n\tnetworks: Network[];\n\tnumber_of_episodes: number;\n\tnumber_of_seasons: number;\n\torigin_country: Array<string>;\n\toriginal_language: string;\n\toriginal_name: string;\n\toverview: string;\n\tpopularity: number;\n\tposter_path: string;\n\tproduction_companies: TvCompany[];\n\tseasons: Season[];\n\tstatus: string;\n\ttype: string;\n\tvote_average: number;\n\tvote_count: number;\n\texternal_ids: ExternalIds;\n\tvideos: Videos;\n}\n\ninterface ITvAPI {\n\ttopRated: () => AxiosPromise<TvListData>;\n\tpopular: () => AxiosPromise<TvListData>;\n\tairingToday: () => AxiosPromise<TvListData>;\n\tshowDetail: (id: number) => AxiosPromise<TvDetail>;\n\tsearch: (string: string) => AxiosPromise<TvListData>;\n}\n\nexport const tvAPI: ITvAPI = {\n\ttopRated: () => API.get('tv/top_rated'),\n\tpopular: () => API.get('tv/popular'),\n\tairingToday: () => API.get('tv/airing_today'),\n\tshowDetail: (id: number) =>\n\t\tAPI.get(`tv/${id}`, {\n\t\t\tparams: {\n\t\t\t\tappend_to_response: 'videos,external_ids'\n\t\t\t}\n\t\t}),\n\tsearch: (term: string) =>\n\t\tAPI.get('search/tv', {\n\t\t\tparams: {\n\t\t\t\tquery: encodeURIComponent(term)\n\t\t\t}\n\t\t})\n};\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst Container = styled.div`\n\theight: 100vh;\n\twidth: 100vw;\n\tdisplay: flex;\n\tjustify-content: center;\n\tfont-size: 28px;\n\tmargin-top: 20px;\n`;\n\nconst Loading = () => (\n\t<Container>\n\t\t<span role=\"img\" aria-label=\"Loading\">\n\t\t\t⏰\n\t\t</span>\n\t</Container>\n);\n\nexport default Loading;\n","import React, { ReactChildren } from 'react';\nimport styled from 'styled-components';\n\nconst Container = styled.div`\n\t:not(:last-child) {\n\t\tmargin-bottom: 50px;\n\t}\n`;\n\nconst Title = styled.span`\n\tfont-size: 14px;\n\tfont-weight: 600;\n`;\n\nconst Grid = styled.div`\n\tdisplay: grid;\n\tgrid-template-columns: repeat(auto-fill, 125px);\n\tgrid-gap: 25px;\n\tmargin-top: 25px;\n`;\n\ninterface IProps {\n\ttitle: string;\n\tchildren: ReactChildren | JSX.Element[];\n}\n\nconst Section = ({ title, children }: IProps) => (\n\t<Container>\n\t\t<Title>{title}</Title>\n\t\t<Grid>{children}</Grid>\n\t</Container>\n);\n\nexport default Section;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nconst Container = styled.div`\n\tfont-size: 12px;\n`;\n\nconst Image = styled.div<{ bgURL: string }>`\n\tbackground-image: url(${props => props.bgURL});\n\theight: 180px;\n\tbackground-size: cover;\n\tborder-radius: 4px;\n\tbackground-position: center center;\n\ttransition: opacity 0.1s linear;\n`;\n\nconst Rating = styled.span`\n\tbottom: 5px;\n\tright: 5px;\n\tposition: absolute;\n\topacity: 0;\n\ttransition: opacity 0.1s linear;\n`;\n\nconst ImageContainer = styled.div`\n\tmargin-bottom: 5px;\n\tposition: relative;\n\t&:hover {\n\t\t${Image} {\n\t\t\topacity: 0.3;\n\t\t}\n\t\t${Rating} {\n\t\t\topacity: 1;\n\t\t}\n\t}\n`;\n\nconst Title = styled.span`\n\tdisplay: block;\n\tmargin-bottom: 3px;\n`;\n\nconst Year = styled.span`\n\tfont-size: 10px;\n\tcolor: rgba(255, 255, 255, 0.5);\n`;\n\ninterface IProps {\n\tid: number;\n\timageURL: string;\n\ttitle: string;\n\trating: number;\n\tyear: string;\n\tisMovie?: boolean;\n}\n\nconst Poster = ({\n\tid,\n\timageURL,\n\ttitle,\n\trating,\n\tyear,\n\tisMovie = false\n}: IProps) => (\n\t<Link to={isMovie ? `/movie/${id}` : `/show/${id}`}>\n\t\t<Container>\n\t\t\t<ImageContainer>\n\t\t\t\t<Image\n\t\t\t\t\tbgURL={\n\t\t\t\t\t\timageURL\n\t\t\t\t\t\t\t? `https://image.tmdb.org/t/p/w300${imageURL}`\n\t\t\t\t\t\t\t: require('assets/noPosterSmall.png')\n\t\t\t\t\t}\n\t\t\t\t/>\n\t\t\t\t<Rating>\n\t\t\t\t\t<span role=\"img\" aria-label=\"rating\">\n\t\t\t\t\t\t★\n\t\t\t\t\t</span>{' '}\n\t\t\t\t\t{rating}/10\n\t\t\t\t</Rating>\n\t\t\t</ImageContainer>\n\t\t\t<Title>\n\t\t\t\t{title.length > 18 ? `${title.substring(0, 18)}...` : title}\n\t\t\t</Title>\n\t\t\t<Year>{year}</Year>\n\t\t</Container>\n\t</Link>\n);\n\nexport default Poster;\n","import React, { useState, useEffect } from 'react';\nimport Helmet from 'react-helmet';\nimport styled from 'styled-components';\nimport { moviesAPI, MovieItem } from 'api';\nimport Loading from 'components/Loading';\nimport Section from 'components/Section';\nimport Poster from 'components/Poster';\n\nconst Container = styled.div`\n\tpadding: 20px;\n`;\n\nconst useFetch = () => {\n\tconst [loading, setLoading] = useState<boolean>(true);\n\tconst [error, setError] = useState<ErrorEvent | null>(null);\n\tconst [result, setResult] = useState<{\n\t\tnowPlaying: MovieItem[] | null;\n\t\tupcoming: MovieItem[] | null;\n\t\tpopular: MovieItem[] | null;\n\t} | null>(null);\n\tuseEffect(() => {\n\t\tconst fetchData = async () => {\n\t\t\ttry {\n\t\t\t\tconst {\n\t\t\t\t\tdata: { results: nowPlaying }\n\t\t\t\t} = await moviesAPI.nowPlaying();\n\t\t\t\tconst {\n\t\t\t\t\tdata: { results: upcoming }\n\t\t\t\t} = await moviesAPI.upcoming();\n\t\t\t\tconst {\n\t\t\t\t\tdata: { results: popular }\n\t\t\t\t} = await moviesAPI.popular();\n\t\t\t\tsetResult({\n\t\t\t\t\tnowPlaying,\n\t\t\t\t\tupcoming,\n\t\t\t\t\tpopular\n\t\t\t\t});\n\t\t\t} catch (e) {\n\t\t\t\tsetError(e);\n\t\t\t} finally {\n\t\t\t\tsetLoading(false);\n\t\t\t}\n\t\t};\n\t\tfetchData();\n\t}, []);\n\n\treturn { loading, result, error };\n};\n\nconst Home = () => {\n\tconst { loading, result } = useFetch();\n\treturn (\n\t\t<>\n\t\t\t<Helmet title=\"Movies | Nomflix\" />\n\t\t\t{loading ? (\n\t\t\t\t<Loading />\n\t\t\t) : (\n\t\t\t\t<Container>\n\t\t\t\t\t{result &&\n\t\t\t\t\t\tresult.nowPlaying &&\n\t\t\t\t\t\tresult.nowPlaying.length > 0 && (\n\t\t\t\t\t\t\t<Section title=\"Now Playing\">\n\t\t\t\t\t\t\t\t{result.nowPlaying.map(movie => (\n\t\t\t\t\t\t\t\t\t<Poster\n\t\t\t\t\t\t\t\t\t\tkey={movie.id}\n\t\t\t\t\t\t\t\t\t\tid={movie.id}\n\t\t\t\t\t\t\t\t\t\timageURL={movie.poster_path}\n\t\t\t\t\t\t\t\t\t\ttitle={movie.title}\n\t\t\t\t\t\t\t\t\t\trating={movie.vote_average}\n\t\t\t\t\t\t\t\t\t\tyear={movie.release_date.substring(\n\t\t\t\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\t\t\t\t4\n\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\tisMovie={true}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</Section>\n\t\t\t\t\t\t)}\n\t\t\t\t\t{result && result.upcoming && result.upcoming.length > 0 && (\n\t\t\t\t\t\t<Section title=\"Upcoming\">\n\t\t\t\t\t\t\t{result.upcoming.map(movie => (\n\t\t\t\t\t\t\t\t<Poster\n\t\t\t\t\t\t\t\t\tkey={movie.id}\n\t\t\t\t\t\t\t\t\tid={movie.id}\n\t\t\t\t\t\t\t\t\timageURL={movie.poster_path}\n\t\t\t\t\t\t\t\t\ttitle={movie.title}\n\t\t\t\t\t\t\t\t\trating={movie.vote_average}\n\t\t\t\t\t\t\t\t\tyear={movie.release_date.substring(0, 4)}\n\t\t\t\t\t\t\t\t\tisMovie={true}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</Section>\n\t\t\t\t\t)}\n\t\t\t\t\t{result && result.popular && result.popular.length > 0 && (\n\t\t\t\t\t\t<Section title=\"Popular\">\n\t\t\t\t\t\t\t{result.popular.map(movie => (\n\t\t\t\t\t\t\t\t<Poster\n\t\t\t\t\t\t\t\t\tkey={movie.id}\n\t\t\t\t\t\t\t\t\tid={movie.id}\n\t\t\t\t\t\t\t\t\timageURL={movie.poster_path}\n\t\t\t\t\t\t\t\t\ttitle={movie.title}\n\t\t\t\t\t\t\t\t\trating={movie.vote_average}\n\t\t\t\t\t\t\t\t\tyear={movie.release_date.substring(0, 4)}\n\t\t\t\t\t\t\t\t\tisMovie={true}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</Section>\n\t\t\t\t\t)}\n\t\t\t\t</Container>\n\t\t\t)}\n\t\t</>\n\t);\n};\n\nexport default Home;\n","import React, { useState, useEffect } from 'react';\nimport Helmet from 'react-helmet';\nimport styled from 'styled-components';\nimport { TvItem, tvAPI } from 'api';\nimport Loading from 'components/Loading';\nimport Section from 'components/Section';\nimport Poster from 'components/Poster';\n\nconst Container = styled.div`\n\tpadding: 20px;\n`;\n\nconst useFetch = () => {\n\tconst [loading, setLoading] = useState<boolean>(true);\n\tconst [error, setError] = useState<ErrorEvent | null>(null);\n\tconst [result, setResult] = useState<{\n\t\ttopRated: TvItem[] | null;\n\t\tpopular: TvItem[] | null;\n\t\tairingToday: TvItem[] | null;\n\t} | null>(null);\n\tconst fetchData = async () => {\n\t\ttry {\n\t\t\tconst {\n\t\t\t\tdata: { results: topRated }\n\t\t\t} = await tvAPI.topRated();\n\t\t\tconst {\n\t\t\t\tdata: { results: popular }\n\t\t\t} = await tvAPI.popular();\n\t\t\tconst {\n\t\t\t\tdata: { results: airingToday }\n\t\t\t} = await tvAPI.airingToday();\n\t\t\tsetResult({\n\t\t\t\ttopRated,\n\t\t\t\tpopular,\n\t\t\t\tairingToday\n\t\t\t});\n\t\t} catch (e) {\n\t\t\tsetError(e);\n\t\t} finally {\n\t\t\tsetLoading(false);\n\t\t}\n\t};\n\tuseEffect(() => {\n\t\tfetchData();\n\t}, []);\n\n\treturn { loading, result, error };\n};\n\nconst TV = () => {\n\tconst { loading, result } = useFetch();\n\treturn (\n\t\t<>\n\t\t\t<Helmet title=\"TV Shows | Nomflix\" />\n\t\t\t{loading ? (\n\t\t\t\t<Loading />\n\t\t\t) : (\n\t\t\t\t<Container>\n\t\t\t\t\t{result && result.topRated && result.topRated.length > 0 && (\n\t\t\t\t\t\t<Section title=\"Top Rated\">\n\t\t\t\t\t\t\t{result.topRated.map(show => (\n\t\t\t\t\t\t\t\t<Poster\n\t\t\t\t\t\t\t\t\tkey={show.id}\n\t\t\t\t\t\t\t\t\tid={show.id}\n\t\t\t\t\t\t\t\t\timageURL={show.poster_path}\n\t\t\t\t\t\t\t\t\ttitle={show.original_name}\n\t\t\t\t\t\t\t\t\trating={show.vote_average}\n\t\t\t\t\t\t\t\t\tyear={show.first_air_date.substring(0, 4)}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</Section>\n\t\t\t\t\t)}\n\t\t\t\t\t{result && result.popular && result.popular.length > 0 && (\n\t\t\t\t\t\t<Section title=\"Popular\">\n\t\t\t\t\t\t\t{result.popular.map(show => (\n\t\t\t\t\t\t\t\t<Poster\n\t\t\t\t\t\t\t\t\tkey={show.id}\n\t\t\t\t\t\t\t\t\tid={show.id}\n\t\t\t\t\t\t\t\t\timageURL={show.poster_path}\n\t\t\t\t\t\t\t\t\ttitle={show.original_name}\n\t\t\t\t\t\t\t\t\trating={show.vote_average}\n\t\t\t\t\t\t\t\t\tyear={show.first_air_date.substring(0, 4)}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</Section>\n\t\t\t\t\t)}\n\t\t\t\t\t{result &&\n\t\t\t\t\t\tresult.airingToday &&\n\t\t\t\t\t\tresult.airingToday.length > 0 && (\n\t\t\t\t\t\t\t<Section title=\"Airing Today\">\n\t\t\t\t\t\t\t\t{result.airingToday.map(show => (\n\t\t\t\t\t\t\t\t\t<Poster\n\t\t\t\t\t\t\t\t\t\tkey={show.id}\n\t\t\t\t\t\t\t\t\t\tid={show.id}\n\t\t\t\t\t\t\t\t\t\timageURL={show.poster_path}\n\t\t\t\t\t\t\t\t\t\ttitle={show.original_name}\n\t\t\t\t\t\t\t\t\t\trating={show.vote_average}\n\t\t\t\t\t\t\t\t\t\tyear={show.first_air_date.substring(\n\t\t\t\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\t\t\t\t4\n\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</Section>\n\t\t\t\t\t\t)}\n\t\t\t\t</Container>\n\t\t\t)}\n\t\t</>\n\t);\n};\n\nexport default TV;\n","import React, { useState, useEffect } from 'react';\nimport Helmet from 'react-helmet';\nimport styled from 'styled-components';\nimport { MovieItem, TvItem, moviesAPI, tvAPI } from 'api';\nimport Loading from 'components/Loading';\nimport Section from 'components/Section';\nimport Poster from 'components/Poster';\n\nconst Container = styled.div`\n\tpadding: 20px;\n`;\n\nconst Form = styled.form`\n\tmargin-bottom: 50px;\n\twidth: 100%;\n`;\n\nconst Input = styled.input`\n\tall: unset;\n\tfont-size: 28px;\n\twidth: 100%;\n`;\n\nconst useInput = (defaultValue: string) => {\n\tconst [value, setValue] = useState(defaultValue);\n\n\tconst onChange = (event: React.FormEvent<HTMLInputElement>) => {\n\t\tconst {\n\t\t\tcurrentTarget: { value }\n\t\t} = event;\n\t\tsetValue(value);\n\t};\n\n\treturn { value, onChange };\n};\n\nconst useFetch = (term: string) => {\n\tconst [loading, setLoading] = useState<boolean>(true);\n\tconst [error, setError] = useState<ErrorEvent | null>(null);\n\tconst [results, setResults] = useState<{\n\t\tmovieResults: MovieItem[] | null;\n\t\ttvResults: TvItem[] | null;\n\t} | null>(null);\n\tuseEffect(() => {\n\t\tconst fetchData = async () => {\n\t\t\ttry {\n\t\t\t\tif (term.length === 0) return;\n\t\t\t\tsetLoading(true);\n\t\t\t\tconst {\n\t\t\t\t\tdata: { results: movieResults }\n\t\t\t\t} = await moviesAPI.search(term);\n\t\t\t\tconst {\n\t\t\t\t\tdata: { results: tvResults }\n\t\t\t\t} = await tvAPI.search(term);\n\t\t\t\tsetResults({\n\t\t\t\t\tmovieResults,\n\t\t\t\t\ttvResults\n\t\t\t\t});\n\t\t\t} catch (e) {\n\t\t\t\tsetError(e);\n\t\t\t} finally {\n\t\t\t\tsetLoading(false);\n\t\t\t}\n\t\t};\n\t\tfetchData();\n\t}, [term]);\n\n\treturn { loading, results, error };\n};\n\nconst Search = () => {\n\tconst term = useInput('');\n\tconst [termValue, setTermValue] = useState('');\n\tconst { loading, results } = useFetch(termValue);\n\treturn (\n\t\t<Container>\n\t\t\t<Helmet title=\"Search | Nomflix\" />\n\t\t\t<Form\n\t\t\t\tonSubmit={(event: React.FormEvent<HTMLFormElement>) => {\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\tsetTermValue(term.value);\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<Input {...term} placeholder=\"Search Movies or TV Shows...\" />\n\t\t\t</Form>\n\t\t\t{loading ? (\n\t\t\t\t<Loading />\n\t\t\t) : (\n\t\t\t\t<>\n\t\t\t\t\t{results &&\n\t\t\t\t\t\tresults.movieResults &&\n\t\t\t\t\t\tresults.movieResults.length > 0 && (\n\t\t\t\t\t\t\t<Section title=\"Movie Results\">\n\t\t\t\t\t\t\t\t{results.movieResults.map(movie => (\n\t\t\t\t\t\t\t\t\t<Poster\n\t\t\t\t\t\t\t\t\t\tkey={movie.id}\n\t\t\t\t\t\t\t\t\t\tid={movie.id}\n\t\t\t\t\t\t\t\t\t\timageURL={movie.poster_path}\n\t\t\t\t\t\t\t\t\t\ttitle={movie.title}\n\t\t\t\t\t\t\t\t\t\trating={movie.vote_average}\n\t\t\t\t\t\t\t\t\t\tyear={movie.release_date.substring(\n\t\t\t\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\t\t\t\t4\n\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\tisMovie={true}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</Section>\n\t\t\t\t\t\t)}\n\t\t\t\t\t{results &&\n\t\t\t\t\t\tresults.tvResults &&\n\t\t\t\t\t\tresults.tvResults.length > 0 && (\n\t\t\t\t\t\t\t<Section title=\"TV Show Results\">\n\t\t\t\t\t\t\t\t{results.tvResults.map(show => (\n\t\t\t\t\t\t\t\t\t<Poster\n\t\t\t\t\t\t\t\t\t\tkey={show.id}\n\t\t\t\t\t\t\t\t\t\tid={show.id}\n\t\t\t\t\t\t\t\t\t\timageURL={show.poster_path}\n\t\t\t\t\t\t\t\t\t\ttitle={show.original_name}\n\t\t\t\t\t\t\t\t\t\trating={show.vote_average}\n\t\t\t\t\t\t\t\t\t\tyear={show.first_air_date.substring(\n\t\t\t\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\t\t\t\t4\n\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</Section>\n\t\t\t\t\t\t)}\n\t\t\t\t</>\n\t\t\t)}\n\t\t</Container>\n\t);\n};\n\nexport default Search;\n","import React, { useState } from 'react';\nimport Helmet from 'react-helmet';\nimport { MovieDetail } from 'api';\nimport {\n\tData,\n\tItemContainer,\n\tTitle,\n\tItem,\n\tDivider,\n\tOverview,\n\tTabHeader,\n\tTabHeaderItem,\n\tTabContent,\n\tTabContentItem,\n\tTabContentText,\n\tTabContentTitle\n} from 'routes/Detail';\n\ninterface IProps {\n\tresult: MovieDetail;\n}\n\nconst MovieDetailData = ({ result }: IProps) => {\n\tconst useTabs = (initialTab: number) => {\n\t\tconst [currentIndex, setCurrentIndex] = useState(initialTab);\n\t\treturn {\n\t\t\tcurrentIndex: currentIndex,\n\t\t\tchangeIetm: setCurrentIndex\n\t\t};\n\t};\n\tconst content = [\n\t\t{ tab: 'YT Videos' },\n\t\t{\n\t\t\ttab: 'Production Company & Countries'\n\t\t}\n\t];\n\tconst { currentIndex, changeIetm } = useTabs(0);\n\treturn (\n\t\t<Data>\n\t\t\t<Helmet title={`${result.title} | Nomflix`} />\n\t\t\t<Title>\n\t\t\t\t<a href={`https://www.imdb.com/title/${result.imdb_id}`}>\n\t\t\t\t\t{result.title}\n\t\t\t\t</a>\n\t\t\t</Title>\n\t\t\t<ItemContainer>\n\t\t\t\t<Item>{result.release_date.substring(0, 4)}</Item>\n\t\t\t\t<Divider>•</Divider>\n\t\t\t\t<Item>{result.runtime}</Item>\n\t\t\t\t<Divider>•</Divider>\n\t\t\t\t<Item>\n\t\t\t\t\t{result.genres &&\n\t\t\t\t\t\tresult.genres.map((genre, index) =>\n\t\t\t\t\t\t\tindex === result.genres.length - 1\n\t\t\t\t\t\t\t\t? genre.name\n\t\t\t\t\t\t\t\t: `${genre.name} / `\n\t\t\t\t\t\t)}\n\t\t\t\t</Item>\n\t\t\t</ItemContainer>\n\t\t\t<Overview>{result.overview}</Overview>\n\t\t\t<TabHeader>\n\t\t\t\t{content.map((section, index) => (\n\t\t\t\t\t<TabHeaderItem\n\t\t\t\t\t\tonClick={() => changeIetm(index)}\n\t\t\t\t\t\tactive={currentIndex === index}\n\t\t\t\t\t>\n\t\t\t\t\t\t{section.tab}\n\t\t\t\t\t</TabHeaderItem>\n\t\t\t\t))}\n\t\t\t</TabHeader>\n\t\t\t<TabContent>\n\t\t\t\t{content.map((section, index) => (\n\t\t\t\t\t<TabContentItem active={currentIndex === index}>\n\t\t\t\t\t\t{section.tab === 'YT Videos' && (\n\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t{result.videos.results\n\t\t\t\t\t\t\t\t\t.filter(item => item.site === 'YouTube')\n\t\t\t\t\t\t\t\t\t.map(videoResult => (\n\t\t\t\t\t\t\t\t\t\t<TabContentText>\n\t\t\t\t\t\t\t\t\t\t\t<a\n\t\t\t\t\t\t\t\t\t\t\t\thref={`https://www.youtube.com/watch?v=${videoResult.key}`}\n\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t{videoResult.name}\n\t\t\t\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t\t\t\t</TabContentText>\n\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t{section.tab === 'Production Company & Countries' && (\n\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t{result.production_companies.length > 0 && (\n\t\t\t\t\t\t\t\t\t<TabContentTitle>\n\t\t\t\t\t\t\t\t\t\tProduction Companies\n\t\t\t\t\t\t\t\t\t</TabContentTitle>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t{result.production_companies.map(company => (\n\t\t\t\t\t\t\t\t\t<TabContentText>\n\t\t\t\t\t\t\t\t\t\t{company.name}&nbsp;/&nbsp;\n\t\t\t\t\t\t\t\t\t\t{company.origin_country}\n\t\t\t\t\t\t\t\t\t</TabContentText>\n\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t{result.production_countries.length > 0 && (\n\t\t\t\t\t\t\t\t\t<TabContentTitle>\n\t\t\t\t\t\t\t\t\t\tProduction Countries\n\t\t\t\t\t\t\t\t\t</TabContentTitle>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t{result.production_companies.map(country => (\n\t\t\t\t\t\t\t\t\t<TabContentText>\n\t\t\t\t\t\t\t\t\t\t{country.name}\n\t\t\t\t\t\t\t\t\t</TabContentText>\n\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</TabContentItem>\n\t\t\t\t))}\n\t\t\t</TabContent>\n\t\t</Data>\n\t);\n};\n\nexport default MovieDetailData;\n","import React, { useState } from 'react';\nimport Helmet from 'react-helmet';\nimport { TvDetail } from 'api';\nimport {\n\tData,\n\tItemContainer,\n\tTitle,\n\tItem,\n\tDivider,\n\tOverview,\n\tTabHeader,\n\tTabHeaderItem,\n\tTabContent,\n\tTabContentItem,\n\tTabContentText,\n\tTabContentTitle,\n\tTVSeasonContainer,\n\tTVSeasonContent,\n\tTVSeasonPoster,\n\tTVSeasonText\n} from 'routes/Detail';\n\ninterface IProps {\n\tresult: TvDetail;\n}\n\nconst TVDetailData = ({ result }: IProps) => {\n\tconst useTabs = (initialTab: number) => {\n\t\tconst [currentIndex, setCurrentIndex] = useState(initialTab);\n\t\treturn {\n\t\t\tcurrentIndex: currentIndex,\n\t\t\tchangeIetm: setCurrentIndex\n\t\t};\n\t};\n\tconst content = [\n\t\t{ tab: 'YT Videos' },\n\t\t{\n\t\t\ttab: 'Production Company & Countries'\n\t\t},\n\t\t{\n\t\t\ttab: 'TV Seasons'\n\t\t}\n\t];\n\tconst { currentIndex, changeIetm } = useTabs(0);\n\treturn (\n\t\t<Data>\n\t\t\t<Helmet title={`${result.name} | Nomflix`} />\n\t\t\t<Title>\n\t\t\t\t<a\n\t\t\t\t\thref={`https://www.imdb.com/title/${result.external_ids.imdb_id}`}\n\t\t\t\t\ttarget=\"_blank\"\n\t\t\t\t>\n\t\t\t\t\t{result.name}\n\t\t\t\t</a>\n\t\t\t</Title>\n\t\t\t<ItemContainer>\n\t\t\t\t<Item>{result.first_air_date.substring(0, 4)}</Item>\n\t\t\t\t<Divider>•</Divider>\n\t\t\t\t<Item>{result.episode_run_time[0]} min</Item>\n\t\t\t\t<Divider>•</Divider>\n\t\t\t\t<Item>\n\t\t\t\t\t{result.genres &&\n\t\t\t\t\t\tresult.genres.map((genre, index) =>\n\t\t\t\t\t\t\tindex === result.genres.length - 1\n\t\t\t\t\t\t\t\t? genre.name\n\t\t\t\t\t\t\t\t: `${genre.name} / `\n\t\t\t\t\t\t)}\n\t\t\t\t</Item>\n\t\t\t</ItemContainer>\n\t\t\t<Overview>{result.overview}</Overview>\n\t\t\t<TabHeader>\n\t\t\t\t{content.map((section, index) => (\n\t\t\t\t\t<TabHeaderItem\n\t\t\t\t\t\tonClick={() => changeIetm(index)}\n\t\t\t\t\t\tactive={currentIndex === index}\n\t\t\t\t\t>\n\t\t\t\t\t\t{section.tab}\n\t\t\t\t\t</TabHeaderItem>\n\t\t\t\t))}\n\t\t\t</TabHeader>\n\t\t\t<TabContent>\n\t\t\t\t{content.map((section, index) => (\n\t\t\t\t\t<TabContentItem active={currentIndex === index}>\n\t\t\t\t\t\t{section.tab === 'YT Videos' && (\n\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t{result.videos.results\n\t\t\t\t\t\t\t\t\t.filter(item => item.site === 'YouTube')\n\t\t\t\t\t\t\t\t\t.map(videoResult => (\n\t\t\t\t\t\t\t\t\t\t<TabContentText>\n\t\t\t\t\t\t\t\t\t\t\t<a\n\t\t\t\t\t\t\t\t\t\t\t\thref={`https://www.youtube.com/watch?v=${videoResult.key}`}\n\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t{videoResult.name}\n\t\t\t\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t\t\t\t</TabContentText>\n\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t{section.tab === 'Production Company & Countries' && (\n\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t{result.production_companies.length > 0 && (\n\t\t\t\t\t\t\t\t\t<TabContentTitle>\n\t\t\t\t\t\t\t\t\t\tProduction Companies\n\t\t\t\t\t\t\t\t\t</TabContentTitle>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t{result.production_companies.map(company => (\n\t\t\t\t\t\t\t\t\t<TabContentText>\n\t\t\t\t\t\t\t\t\t\t{company.name}&nbsp;/&nbsp;\n\t\t\t\t\t\t\t\t\t\t{company.origin_country}\n\t\t\t\t\t\t\t\t\t</TabContentText>\n\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t{result.origin_country && (\n\t\t\t\t\t\t\t\t\t<TabContentTitle>\n\t\t\t\t\t\t\t\t\t\tProduction Country\n\t\t\t\t\t\t\t\t\t</TabContentTitle>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t<TabContentText>\n\t\t\t\t\t\t\t\t\t{result.origin_country[0]}\n\t\t\t\t\t\t\t\t</TabContentText>\n\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t{section.tab === 'TV Seasons' && (\n\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t{result.seasons.length > 0 && (\n\t\t\t\t\t\t\t\t\t<TabContentTitle>\n\t\t\t\t\t\t\t\t\t\tTV Seasons\n\t\t\t\t\t\t\t\t\t</TabContentTitle>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t<TVSeasonContainer>\n\t\t\t\t\t\t\t\t\t{result.seasons.length > 0 &&\n\t\t\t\t\t\t\t\t\t\tresult.seasons.map(season => (\n\t\t\t\t\t\t\t\t\t\t\t<TVSeasonContent>\n\t\t\t\t\t\t\t\t\t\t\t\t<TVSeasonPoster\n\t\t\t\t\t\t\t\t\t\t\t\t\timg_url={season.poster_path}\n\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t<TVSeasonText>\n\t\t\t\t\t\t\t\t\t\t\t\t\t{season.name}\n\t\t\t\t\t\t\t\t\t\t\t\t</TVSeasonText>\n\t\t\t\t\t\t\t\t\t\t\t</TVSeasonContent>\n\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t</TVSeasonContainer>\n\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</TabContentItem>\n\t\t\t\t))}\n\t\t\t</TabContent>\n\t\t</Data>\n\t);\n};\n\nexport default TVDetailData;\n","import React from 'react';\nimport Helmet from 'react-helmet';\nimport { Data, Title } from 'routes/Detail';\n\nconst NoResult = () => (\n\t<Data>\n\t\t<Helmet title=\"No result | Nomflix\" />\n\t\t<Title>No result</Title>\n\t</Data>\n);\n\nexport default NoResult;\n","import React, { useState, useEffect } from 'react';\nimport { useLocation, useRouteMatch } from 'react-router';\nimport Helmet from 'react-helmet';\nimport styled from 'styled-components';\nimport { moviesAPI, tvAPI, MovieDetail, TvDetail } from 'api';\nimport Loading from 'components/Loading';\nimport MovieDetailData from 'components/MovieDetailData';\nimport TVDetailData from 'components/TVDetailData';\nimport NoResult from 'components/NoResult';\n\nconst Container = styled.div`\n\theight: calc(100vh - 50px);\n\twidth: 100%;\n\tposition: relative;\n\tpadding: 50px;\n`;\n\nconst Backdrop = styled.div<{ bgURL: string }>`\n\tposition: absolute;\n\ttop: 0;\n\tleft: 0;\n\twidth: 100%;\n\theight: 100%;\n\tbackground-image: url(${props => props.bgURL});\n\tbackground-position: center center;\n\tbackground-size: cover;\n\tfilter: blur(3px);\n\topacity: 0.5;\n\tz-index: 0;\n`;\n\nconst Content = styled.div`\n\tdisplay: flex;\n\twidth: 100%;\n\tposition: relative;\n\tz-index: 1;\n\theight: 100%;\n`;\n\nconst Cover = styled.div<{ bgURL: string }>`\n\twidth: 30%;\n\tbackground-image: url(${props => props.bgURL});\n\tbackground-position: center center;\n\tbackground-size: cover;\n\theight: 100%;\n\tborder-radius: 5px;\n`;\n\nexport const Data = styled.div`\n\twidth: 70%;\n\tmargin-left: 40px;\n`;\n\nexport const Title = styled.h3`\n\tfont-size: 32px;\n\ta {\n\t\ttext-decoration: underline;\n\t}\n`;\n\nexport const ItemContainer = styled.div`\n\tmargin: 20px 0;\n`;\n\nexport const Item = styled.span``;\n\nexport const Divider = styled.span`\n\tmargin: 0 10px;\n`;\n\nexport const Overview = styled.p`\n\tfont-size: 16px;\n\topacity: 0.7;\n\tline-height: 1.5;\n\twidth: 50%;\n`;\n\nexport const TabHeader = styled.div`\n\tpadding: 16px 0;\n\tdisplay: flex;\n`;\n\nexport const TabHeaderItem = styled.button<{ active: boolean }>`\n\tfont-size: 14px;\n\tfont-weight: ${props => (props.active ? 'bold' : 'normal')};\n\ttext-decoration: ${props => (props.active ? 'underline' : 'none')};\n\tpadding: 8px;\n\tbackground: none;\n\toutline: none;\n\tborder: none;\n\tcolor: #fff;\n\tcursor: pointer;\n`;\n\nexport const TabContent = styled.div``;\n\nexport const TabContentItem = styled.div<{ active: boolean }>`\n\tdisplay: ${props => (props.active ? 'underline' : 'none')};\n`;\n\nexport const TabContentText = styled.p`\n\tmargin-bottom: 16px;\n\ta {\n\t\ttext-decoration: underline;\n\t}\n`;\n\nexport const TabContentTitle = styled.h6`\n\tmargin-bottom: 16px;\n\tfont-size: 14px;\n\tfont-weight: bold;\n`;\n\nexport const TVSeasonContainer = styled.ul`\n\tdisplay: flex;\n`;\n\nexport const TVSeasonContent = styled.li`\n\tdisplay: flex;\n`;\n\nexport const TVSeasonPoster = styled.div<{ img_url: string | null }>`\n\twidth: 120px;\n\theight: 160px;\n\tbackground-image: ${props =>\n\t\tprops.img_url\n\t\t\t? `url(https://image.tmdb.org/t/p/original${props.img_url})`\n\t\t\t: ''};\n\tbackground-position: center center;\n\tbackground-size: cover;\n\tborder-radius: 5px;\n\tmargin-right: 8px;\n`;\n\nexport const TVSeasonText = styled.p`\n\tmargin-right: 8px;\n`;\n\ninterface Iparams {\n\tid: string | undefined;\n}\n\nconst useFetch = (id: any) => {\n\tconst { pathname } = useLocation();\n\tconst [loading, setLoading] = useState<boolean>(true);\n\tconst [error, setError] = useState<ErrorEvent | null>(null);\n\tconst [result, setResult] = useState<MovieDetail | TvDetail | null>(null);\n\tuseEffect(() => {\n\t\tconst fetchData = async () => {\n\t\t\ttry {\n\t\t\t\tif (id) {\n\t\t\t\t\tconst movieId = parseInt(id);\n\t\t\t\t\tif (pathname.includes('/movie/')) {\n\t\t\t\t\t\tconst { data } = await moviesAPI.movieDetail(movieId);\n\t\t\t\t\t\tsetResult(data);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst { data } = await tvAPI.showDetail(movieId);\n\t\t\t\t\t\tsetResult(data);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthrow Error('Id is undefined.');\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tsetError(e);\n\t\t\t\tsetResult(null);\n\t\t\t} finally {\n\t\t\t\tsetLoading(false);\n\t\t\t}\n\t\t};\n\t\tfetchData();\n\t}, [pathname, id]);\n\n\treturn { loading, result, error };\n};\n\nconst renderData = (result: MovieDetail | TvDetail) => {\n\tif ('title' in result) {\n\t\treturn <MovieDetailData result={result} />;\n\t} else if ('original_name' in result) {\n\t\treturn <TVDetailData result={result} />;\n\t}\n\treturn null;\n};\n\nconst Detail = () => {\n\tconst match = useRouteMatch<Iparams>(['/movie/:id', '/show/:id']);\n\tconst { loading, result } = useFetch(match && match.params.id);\n\treturn (\n\t\t<>\n\t\t\t{loading ? (\n\t\t\t\t<>\n\t\t\t\t\t<Helmet title=\"Loading | Nomflix\" />\n\t\t\t\t\t<Loading />\n\t\t\t\t</>\n\t\t\t) : (\n\t\t\t\t<Container>\n\t\t\t\t\t{result ? (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t<Backdrop\n\t\t\t\t\t\t\t\tbgURL={`https://image.tmdb.org/t/p/original${result.backdrop_path}`}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<Content>\n\t\t\t\t\t\t\t\t<Cover\n\t\t\t\t\t\t\t\t\tbgURL={\n\t\t\t\t\t\t\t\t\t\tresult.poster_path\n\t\t\t\t\t\t\t\t\t\t\t? `https://image.tmdb.org/t/p/original${result.poster_path}`\n\t\t\t\t\t\t\t\t\t\t\t: require('assets/noPosterSmall.png')\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t{renderData(result)}\n\t\t\t\t\t\t\t</Content>\n\t\t\t\t\t\t</>\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<Content>\n\t\t\t\t\t\t\t<NoResult />\n\t\t\t\t\t\t</Content>\n\t\t\t\t\t)}\n\t\t\t\t</Container>\n\t\t\t)}\n\t\t</>\n\t);\n};\n\nexport default Detail;\n","import React from 'react';\nimport { Link, useLocation } from 'react-router-dom';\nimport styled from 'styled-components';\n\nconst Navigation = styled.header`\n\tcolor: #fff;\n\tposition: fixed;\n\ttop: 0;\n\tleft: 0;\n\twidth: 100%;\n\theight: 50px;\n\tdisplay: flex;\n\talign-items: center;\n\tbackground-color: rgba(20, 20, 20, 0.8);\n\tz-index: 10;\n\tbox-shadow: 0px 1px 5px 2px rgba(0, 0, 0, 0.8);\n`;\n\nconst List = styled.ul`\n\tdisplay: flex;\n`;\n\nconst ListItem = styled.li<{ current: boolean }>`\n\twidth: 80px;\n\theight: 50px;\n\ttext-align: center;\n\tborder-bottom: 3px solid\n\t\t${props => (props.current ? '#3498db' : 'transparent')};\n\ttransition: border-bottom 0.5s ease-in-out;\n`;\n\nconst StyledLink = styled(Link)`\n\theight: 50px;\n\tdisplay: flex;\n\talign-items: center;\n\tjustify-content: center;\n`;\n\nconst Header = () => {\n\tconst { pathname } = useLocation();\n\treturn (\n\t\t<Navigation>\n\t\t\t<List>\n\t\t\t\t<ListItem current={pathname === '/'}>\n\t\t\t\t\t<StyledLink to=\"/\">Movies</StyledLink>\n\t\t\t\t</ListItem>\n\t\t\t\t<ListItem current={pathname === '/tv'}>\n\t\t\t\t\t<StyledLink to=\"/tv\">TV</StyledLink>\n\t\t\t\t</ListItem>\n\t\t\t\t<ListItem current={pathname === '/search'}>\n\t\t\t\t\t<StyledLink to=\"/search\">Search</StyledLink>\n\t\t\t\t</ListItem>\n\t\t\t</List>\n\t\t</Navigation>\n\t);\n};\n\nexport default Header;\n","import React from 'react';\nimport { HashRouter, Route, Switch, Redirect } from 'react-router-dom';\nimport Home from 'routes/Home';\nimport TV from 'routes/TV';\nimport Search from 'routes/Search';\nimport Detail from 'routes/Detail';\nimport Header from './Header';\n\nconst Router = () => (\n\t<HashRouter>\n\t\t<>\n\t\t\t<Header />\n\t\t\t<Switch>\n\t\t\t\t<Route exact path=\"/\" component={Home} />\n\t\t\t\t<Route path=\"/tv\" component={TV} />\n\t\t\t\t<Route path=\"/search\" component={Search} />\n\t\t\t\t<Route path=\"/movie/:id\" component={Detail} />\n\t\t\t\t<Route path=\"/show/:id\" component={Detail} />\n\t\t\t\t<Redirect from=\"*\" to=\"/\" />\n\t\t\t</Switch>\n\t\t</>\n\t</HashRouter>\n);\n\nexport default Router;\n","import React from 'react';\nimport GlobalStyles from './GlobalStyles';\nimport Router from './Router';\n\nconst App = () => {\n\treturn (\n\t\t<>\n\t\t\t<GlobalStyles />\n\t\t\t<Router />\n\t\t</>\n\t);\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}